let words = [
  "Zebra",
  "Sling",
  "Crate",
  "Brick",
  "press",
  "truth",
  "sweet",
  "salty",
  "alert",
  "check",
  "roast",
  "toast",
  "shred",
  "cheek",
  "shock",
  "czech",
  "woman",
  "wreck",
  "court",
  "coast",
  "flake",
  "think",
  "smoke",
  "unrig",
  "slant",
  "ultra",
  "vague",
  "pouch",
  "radix",
  "yeast",
  "zoned",
  "cause",
  "quick",
  "bloat",
  "level",
  "civil",
  "civic",
  "madam",
  "house",
  "delay",
  'geoid',
  'remap',
  'trier',
  'gunks',
  'steno',
  'stoma',
  'airer',
  'ovate',
  'torah',
  'apian',
  'smuts',
  'pocks',
  'yurts',
  'exurb',
  'defog',
  'nuder',
  'bosky',
  'nimbi',
  'mothy',
  'joyed',
  'labia',
  'pards',
  'jammy',
  'bigly',
  'faxer',
  'hoppy',
  'nurbs',
  'cotes',
  'dishy',
  'vised',
  'celeb',
  'pismo',
  'casas',
  'withs',
  'dodgy',
  'scudi',
  'mungs',
  'muons',
  'ureas',
  'ioctl',
  'unhip',
  'krone',
  'sager',
  'verst',
  'expat',
  'gronk',
  'uvula',
  'shawm',
  'bilgy',
  'braes',
  'cento',
  'webby',
  'lippy',
  'gamic',
  'lordy',
  'mazed',
  'tings',
  'shoat',
  'faery',
  'wirer',
  'diazo',
  'carer',
  'rater',
  'greps',
  'rente',
  'zloty',
  'viers',
  'unapt',
  'poops',
  'fecal',
  'kepis',
  'taxon',
  'eyers',
  'wonts',
  'spina',
  'stoae',
  'yenta',
  'pooey',
  'buret',
  'japan',
  'bedew',
  'hafts',
  'selfs',
  'oared',
  'herby',
  'pryer',
  'oakum',
  'dinks',
  'titty',
  'sepoy',
  'penes',
  'fusee',
  'winey',
  'gimps',
  'nihil',
  'rille',
  'giber',
  'ousel',
  'umiak',
  'cuppy',
  'hames',
  'shits',
  'azine',
  'glads',
  'tacet',
  'bumph',
  'coyer',
  'honky',
  'gamer',
  'gooky',
  'waspy',
  'sedgy',
  'bents',
  'varia',
  'djinn',
  'junco',
  'pubic',
  'wilco',
  'lazes',
  'idyls',
  'lupus',
  'rives',
  'snood',
  'schmo',
  'spazz',
  'finis',
  'noter',
  'pavan',
  'orbed',
  'bates',
  'pipet',
  'baddy',
  'goers',
  'shako',
  'stets',
  'sebum',
  'seeth',
  'lobar',
  'raver',
  'ajuga',
  'riced',
  'velds',
  'dribs',
  'ville',
  'dhows',
  'unsew',
  'halma',
  'krona',
  'limby',
  'jiffs',
  'treys',
  'bauds',
  'pffft',
  'mimer',
  'plebs',
  'caner',
  'jiber',
  'cuppa',
  'washy',
  'chuff',
  'unarm',
  'yukky',
  'styes',
  'waker',
  'flaks',
  'maces',
  'rimes',
  'gimpy',
  'guano',
  'liras',
  'kapok',
  'scuds',
  'bwana',
  'oring',
  'aider',
  'prier',
  'klugy',
  'monte',
  'golem',
  'velar',
  'firer',
  'pieta',
  'umbel',
  'campo',
  'unpeg',
  'fovea',
  'abeam',
  'boson',
  'asker',
  'goths',
  'vocab',
  'vined',
  'trows',
  'tikis',
  'loper',
  'indie',
  'boffs',
  'spang',
  'grapy',
  'tater',
  'ichor',
  'kilty',
  'lochs',
  'supes',
  'degas',
  'flics',
  'torsi',
  'beths',
  'weber',
  'resaw',
  'lawny',
  'coven',
  'mujik',
  'relet',
  'therm',
  'heigh',
  'shnor',
  'trued',
  'zayin',
  'liest',
  'barfs',
  'bassi',
  'qophs',
  'roily',
  'flabs',
  'punny',
  'okras',
  'hanks',
  'dipso',
  'nerfs',
  'fauns',
  'calla',
  'pseud',
  'lurer',
  'magus',
  'obeah',
  'atria',
  'twink',
  'palmy',
  'pocky',
  'pends',
  'recta',
  'plonk',
  'slaws',
  'keens',
  'nicad',
  'pones',
  'inker',
  'whews',
  'groks',
  'mosts',
  'trews',
  'ulnar',
  'gyppy',
  'cocas',
  'expos',
  'eruct',
  'oiler',
  'vacua',
  'dreck',
  'dater',
  'arums',
  'tubal',
  'voxel',
  'dixit',
  'beery',
  'assai',
  'lades',
  'actin',
  'ghoti',
  'buzzy',
  'meads',
  'grody',
  'ribby',
  'clews',
  'creme',
  'email',
  'pyxie',
  'kulak',
  'bocci',
  'rived',
  'duddy',
  'hoper',
  'lapin',
  'wonks',
  'petri',
  'phial',
  'fugal',
  'holon',
  'boomy',
  'duomo',
  'musos',
  'shier',
  'hayer',
  'porgy',
  'hived',
  'litho',
  'fisty',
  'stagy',
  'luvya',
  'maria',
  'smogs',
  'asana',
  'yogic',
  'slomo',
  'fawny',
  'amine',
  'wefts',
  'gonad',
  'twirp',
  'brava',
  'plyer',
  'fermi',
  'loges',
  'niter',
  'revet',
  'unate',
  'gyved',
  'totty',
  'zappy',
  'honer',
  'giros',
  'dicer',
  'calks',
  'luxes',
  'monad',
  'cruft',
  'quoin',
  'fumer',
  'amped',
  'shlep',
  'vinca',
  'yahoo',
  'vulva',
  'zooey',
  'dryad',
  'nixie',
  'moper',
  'iambs',
  'lunes',
  'nudie',
  'limns',
  'weals',
  'nohow',
  'miaow',
  'gouts',
  'mynas',
  'mazer',
  'kikes',
  'oxeye',
  'stoup',
  'jujus',
  'debar',
  'pubes',
  'taels',
  'defun',
  'rands',
  'blear',
  'paver',
  'goosy',
  'sprog',
  'oleos',
  'toffy',
  'pawer',
  'maced',
  'crits',
  'kluge',
  'tubed',
  'sahib',
  'ganef',
  'scats',
  'sputa',
  'vaned',
  'acned',
  'taxol',
  'plink',
  'oweth',
  'tribs',
  'resay',
  'boule',
  'thous',
  'haply',
  'glans',
  'maxis',
  'bezel',
  'antis',
  'porks',
  'quoit',
  'alkyd',
  'glary',
  'beamy',
  'hexad',
  'bonks',
  'tecum',
  'kerbs',
  'filar',
  'frier',
  'redux',
  'abuzz',
  'fader',
  'shoer',
  'couth',
  'trues',
  'guyed',
  'goony',
  'booky',
  'fuzes',
  'hurly',
  'genet',
  'hodad',
  'calix',
  'filer',
  'pawls',
  'iodic',
  'utero',
  'henge',
  'unsay',
  'liers',
  'piing',
  'weald',
  'sexed',
  'folic',
  'poxed',
  'cunts',
  'anile',
  'kiths',
  'becks',
  'tatty',
  'plena',
  'rebar',
  'abled',
  'toyer',
  'attar',
  'teaks',
  'aioli',
  'awing',
  'anent',
  'feces',
  'redip',
  'wists',
  'prats',
  'mesne',
  'muter',
  'smurf',
  'owest',
  'bahts',
  'lossy',
  'ftped',
  'hunky',
  'hoers',
  'slier',
  'sicks',
  'fatly',
  'delft',
  'hiver',
  'himbo',
  'pengo',
  'busks',
  'loxes',
  'zonks',
  'ilium',
  'aport',
  'ikons',
  'mulct',
  'reeve',
  'civvy',
  'canna',
  'barfy',
  'kaiak',
  'scudo',
  'knout',
  'gaper',
  'bhang',
  'pease',
  'uteri',
  'lases',
  'paten',
  'rasae',
  'axels',
  'stoas',
  'ombre',
  'styli',
  'gunky',
  'hazer',
  'kenaf',
  'ahoys',
  'ammos',
  'weeny',
  'urger',
  'kudzu',
  'paren',
  'bolos',
  'fetor',
  'nitty',
  'techy',
  'lieth',
  'somas',
  'darky',
  'villi',
  'gluon',
  'janes',
  'cants',
  'farts',
  'socle',
  'jinns',
  'ruing',
  'slily',
  'ricer',
  'hadda',
  'wowee',
  'rices',
  'nerts',
  'cauls',
  'swive',
  'lilty',
  'micks',
  'arity',
  'pasha',
  'finif',
  'oinky',
  'gutty',
  'tetra',
  'wises',
  'wolds',
  'balds',
  'picot',
  'whats',
  'shiki',
  'bungs',
  'snarf',
  'legos',
  'dungs',
  'stogy',
  'berms',
  'tangs',
  'vails',
  'roods',
  'morel',
  'sware',
  'elans',
  'latus',
  'gules',
  'razer',
  'doxie',
  'buena',
  'overs',
  'gutta',
  'zincs',
  'nates',
  'kirks',
  'tikes',
  'donee',
  'jerry',
  'mohel',
  'ceder',
  'doges',
  'unmap',
  'folia',
  'rawly',
  'snark',
  'topoi',
  'ceils',
  'immix',
  'yores',
  'diest',
  'bubba',
  'pomps',
  'forky',
  'turdy',
  'lawzy',
  'poohs',
  'worts',
  'gloms',
  'beano',
  'muley',
  'barky',
  'tunny',
  'auric',
  'funks',
  'gaffs',
  'cordy',
  'curdy',
  'lisle',
  'toric',
  'soyas',
  'reman',
  'mungy',
  'carpy',
  'apish',
  'oaten',
  'gappy',
  'aurae',
  'bract',
  'rooky',
  'axled',
  'burry',
  'sizer',
  'proem',
  'turfy',
  'impro',
  'mashy',
  'miens',
  'nonny',
  'olios',
  'grook',
  'sates',
  'agley',
  'corgi',
  'dashy',
  'doser',
  'dildo',
  'apsos',
  'xored',
  'laker',
  'playa',
  'selah',
  'malty',
  'dulse',
  'frigs',
  'demit',
  'whoso',
  'rials',
  'sawer',
  'spics',
  'bedim',
  'snugs',
  'fanin',
  'azoic',
  'icers',
  'suers',
  'wizen',
  'koine',
  'topos',
  'shirr',
  'rifer',
  'feral',
  'laded',
  'lased',
  'turds',
  'swede',
  'easts',
  'cozen',
  'unhit',
  'pally',
  'aitch',
  'sedum',
  'coper',
  'ruche',
  'geeks',
  'swags',
  'etext',
  'algin',
  'offed',
  'ninja',
  'holer',
  'doter',
  'toter',
  'besot',
  'dicut',
  'macer',
  'peens',
  'pewit',
  'redox',
  'poler',
  'yecch',
  'fluky',
  'doeth',
  'twats',
  'cruds',
  'bebug',
  'bider',
  'stele',
  'hexer',
  'wests',
  'gluer',
  'pilau',
  'abaft',
  'whelm',
  'lacer',
  'inode',
  'tabus',
  'gator',
  'cuing',
  'refly',
  'luted',
  'cukes',
  'bairn',
  'bight',
  'arses',
  'crump',
  'loggy',
  'blini',
  'spoor',
  'toyon',
  'harks',
  'wazoo',
  'fenny',
  'naves',
  'keyer',
  'tufas',
  'morph',
  'rajas',
  'typal',
  'spiff',
  'oxlip',
  'unban',
  'mussy',
  'finny',
  'rimer',
  'login',
  'molas',
  'cirri',
  'huzza',
  'agone',
  'unsex',
  'unwon',
  'peats',
  'toile',
  'zombi',
  'dewed',
  'nooky',
  'alkyl',
  'ixnay',
  'dovey',
  'holey',
  'cuber',
  'amyls',
  'podia',
  'chino',
  'apnea',
  'prims',
  'lycra',
  'johns',
  'primo',
  'fatwa',
  'egger',
  'hempy',
  'snook',
  'hying',
  'fuzed',
  'barms',
  'crink',
  'moots',
  'yerba',
  'rhumb',
  'unarc',
  'direr',
  'munge',
  'eland',
  'nares',
  'wrier',
  'noddy',
  'atilt',
  'jukes',
  'ender',
  'thens',
  'unfix',
  'doggo',
  'zooks',
  'diddy',
  'shmoo',
  'brusk',
  'prest',
  'curer',
  'pasts',
  'kelpy',
  'bocce',
  'kicky',
  'taros',
  'lings',
  'dicky',
  'nerdy',
  'abend',
  'stela',
  'biggy',
  'laved',
  'baldy',
  'pubis',
  'gooks',
  'wonky',
  'stied',
  'hypos',
  'assed',
  'spumy',
  'osier',
  'roble',
  'rumba',
  'biffy',
  'pupal',
];
let container = document.querySelector(".container");
let winScreen = document.querySelector(".win-screen");
let submitButton = document.querySelector(".submit");
let inputCount, tryCount, inputRow;
let backSpaceCount = 0;
let randomWord, finalWord;

//Detect touch device
const isTouchDevice = () => {
  try {
    //We try to create TouchEvent (it would fail for desktops and throw error)
    document.createEvent("TouchEvent");
    return true;
  } catch (e) {
    return false;
  }
};

//Initial Setup
const startGame = async () => {
  winScreen.classList.add("hide");
  container.innerHTML = "";
  inputCount = 0;
  successCount = 0;
  tryCount = 0;
  finalWord = "";

  //Creating the grid
  for (let i = 0; i < 6; i++) {
    let inputGroup = document.createElement("div");
    inputGroup.classList.add("input-group");
    for (let j = 0; j < 5; j++) {
      //Disabled by default. We will enable one by one
      inputGroup.innerHTML += `<input type="text" class="input-box" onkeyup="checker(event)" maxlength="1" disabled>`;
    }
    await container.appendChild(inputGroup);
  }
  inputRow = document.querySelectorAll(".input-group");
  inputBox = document.querySelectorAll(".input-box");
  updateDivConfig(inputRow[tryCount].firstChild, false);
  randomWord = getRandom();
  console.log(randomWord);
};

//Get random word
const getRandom = () =>
  words[Math.floor(Math.random() * words.length)].toUpperCase();

//Update input to disabled status and set focus
const updateDivConfig = (element, disabledStatus) => {
  element.disabled = disabledStatus;
  if (!disabledStatus) {
    element.focus();
  }
};

//Logic for writing in the inputs
const checker = async (e) => {
  let value = e.target.value.toUpperCase();
  //disable current input box
  updateDivConfig(e.target, true);
  if (value.length == 1) {
    //if the word is lesss than 5 length and the button isn't backspace
    if (inputCount <= 4 && e.key != "Backspace") {
      //Attach the letter to the final word
      finalWord += value;
      if (inputCount < 4) {
        //enable next
        updateDivConfig(e.target.nextSibling, false);
      }
    }
    inputCount += 1;
  } else if (value.length == 0 && e.key == "Backspace") {
    //Empty input box anduser press Backspace
    finalWord = finalWord.substring(0, finalWord.length - 1);
    if (inputCount == 0) {
      //For first inputbox
      updateDivConfig(e.target, false);
      return false;
    }
    updateDivConfig(e.target, true);
    e.target.previousSibling.value = "";
    //enable previous and decrement count
    updateDivConfig(e.target.previousSibling, false);
    inputCount = -1;
  }
};

//When user presses enter/backspace and all the inputs are filled
window.addEventListener("keyup", (e) => {
  if (inputCount > 4) {
    
    if (e.key == "Enter") {
      validateWord();
    } else if (e.key == "Backspace") {
      inputRow[tryCount].lastChild.value = "";
      finalWord = finalWord.substring(0, finalWord.length - 1);
      updateDivConfig(inputRow[tryCount].lastChild, false);
      inputCount -= 1;
    }
  }
});

//Comparison Logic
const validateWord = async () => {
  if (isTouchDevice()) {
    submitButton.classList.add("hide");
  }
  let failed = false;
  //Get all input boxes of current row
  let currentInputs = inputRow[tryCount].querySelectorAll(".input-box");
  //Check if it is a valid english word
  await fetch(
    `https://api.dictionaryapi.dev/api/v2/entries/en/${finalWord}`
  ).then((response) => {
    if (response.status == "404") {
      console.clear();
      alert("Please Enter Valid Word");
      failed = true;
    }
  });

  //If not then stop here
  if (failed) {
    return false;
  }
  //Initially set these
  let successCount = 0;
  let successLetters = "";
  //Checks for both words
  for (let i in randomWord) {
    //if same then green
    if (finalWord[i] == randomWord[i]) {
      currentInputs[i].classList.add("correct");
      successCount += 1;
      successLetters += randomWord[i];
    } else if (
      randomWord.includes(finalWord[i]) &&
      !successLetters.includes(finalWord[i])
    ) {
      //If the letter exist in the chosen word and is not present in the success array then yellow
      currentInputs[i].classList.add("exists");
    } else {
      currentInputs[i].classList.add("incorrect");
    }
  }
  //Increment try count
  tryCount += 1;
  //If all letters are correct
  if (successCount == 5) {
    //Display the win banner after 1 second
    setTimeout(() => {
      winScreen.classList.remove("hide");
      winScreen.innerHTML = `
        <span>Total guesses: ${tryCount}</span>
        <button onclick="startGame()">New Game</button>
        `;
    }, 1000);
  } else {
    //unsuccessful so next attempt
    inputCount = 0;
    finalWord = "";
    if (tryCount == 6) {
      //all attempts wrong
      tryCount = 0;
      winScreen.classList.remove("hide");
      winScreen.innerHTML = ` <span>You lose</span>
        <button onclick="startGame()">New Game</button>`;
      return false;
    }
    //for next attempt move to first child of next row
    updateDivConfig(inputRow[tryCount].firstChild, false);
  }
  inputCount = 0;
};

window.onload = startGame();
